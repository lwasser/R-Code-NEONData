# load required packages, you may have to install these if missing:
# install.packages('aqp', dep=TRUE)
library("aqp")
install.packages("aqp", type="source")
library("aqp")
library(Hmisc)
library(lattice)
library(MASS)
# load sample data set, a data.frame object with horizon-level data from 10 profiles
data(sp4)
data
sp4
megapit <- read.csv("/Users/lwasser/Documents/GitHub/biogeochemistryIPT/megapit/Soil_pit_data_20141113.csv", header=T, fill=T)
megapit <- read.csv("/Users/lwasser/Documents/GitHub/biogeochemistryIPT/prototype_data/megapit/Soil_pit_data_20141113.csv", header=T, fill=T)
megapit[3]
dog=cbind[megapit$latitude,megapit$longitude]
dog=cbind([)megapit$latitude,megapit$longitude)
dog=cbind(megapit$latitude,megapit$longitude)
dog
dog=cbind(megapit$latitude,megapit$longitude)
dog
lnames(megapit)[c(3,4)] <- c("latitude","longitude")
colnames(megapit)[c(24,27,28)] <- c("horizon","top.depth","bottom.depth")
co
colnames(megapit)[c(3,4)] <- c("latitude","longitude")
colnames(megapit)[c(24,27,28)] <- c("horizon","top.depth","bottom.depth")
colnames(megapit)[c(91,121)] <- c("total.P", "total.N")
megapit$total.P <- megapit$total.P/1000
dog=cbind(megapit$latitude,megapit$longitude)
dog
megapit[1]
megapit[2]
megapit[1,2,3]
megapit(1)
newdataframe <- cbind(megapit[3],megapit[4],megapit[24],megapit[27],megapit[28],,megapit[91],,megapit[121])
newdataframe <- cbind(megapit[3],megapit[4],megapit[24],megapit[27],megapit[28],,megapit[91],megapit[121])
newdataframe <- cbind(megapit[3],megapit[4],megapit[24],megapit[27],megapit[28],megapit[91],megapit[121])
newdataframe
head(newdataframe,n=10)
soilsSubset <- cbind(megapit[3],megapit[4],megapit[24],megapit[27],megapit[28],megapit[91],megapit[121])
newdataframe <- cbind(megapit[3],megapit[4],megapit[24],megapit[27],megapit[28],megapit[91],megapit[121]
test <-soilsSubset[-c(255:300), ]
test
soilsSubset <- cbind(megapit[3],megapit[4],megapit[24],megapit[27],megapit[28],megapit[91],megapit[121])
test <-soilsSubset[-c(255:504), ]
soilsSubset$total.P
soilsSubset <- cbind(megapit[3],megapit[4],megapit[24],megapit[27],megapit[28],megapit[91],megapit[121])
#for some reason more than 244 rows populate - remove extra rows
soilsSubset <- soilsSubset[-c(255:504), ]
soilsSubset$total.P
megapit$total.P <- megapit$total.P/1000
megapit$total.P
bottom.depth <- gsub(">","",megapit$bottom.depth)
depth <- rowMeans(data.frame(cbind(megapit$top.depth, as.numeric(bottom.depth))))
depth
megapit$Site
megapit$Site(n=10)
megapit[3]
megapit[2]
soilsSubset <- cbind(megapit[2],megapit[3],megapit[4],megapit[24],megapit[27],megapit[28],megapit[91],megapit[121])
#for some reason more than 244 rows populate - remove extra rows
soilsSubset <- soilsSubset[-c(255:504), ]
#check that the data look ok
head(soilsSubset,n=10)
soilsSubset$total.P <- soilsSubset$total.P/1000
#remove '>' from the bottom.depth column
bottom.depth <- gsub(">","",soilsSubset$bottom.depth)
depth <- rowMeans(data.frame(cbind(soilsSubset$top.depth, as.numeric(bottom.depth))))
# first: trying to get to an interesting one-number-per-site thing for the map
A.all <- soilsSubset[grep("A", soilsSubset$horizon),]
options(stringsAsFactors=F, strip.white=T)
megapit <- read.csv("/Users/lwasser/Documents/GitHub/biogeochemistryIPT/prototype_data/megapit/Soil_pit_data_20141113.csv", header=T, fill=T)
# change column headers and stuff for functionality (Ed's headers are impossible)
# plus it looks like a bunch of longitudes are entered incorrectly? I haven't
# fixed them here, but a bunch are >0 and they should all be <0...
colnames(megapit)[c(3,4)] <- c("latitude","longitude")
colnames(megapit)[c(24,27,28)] <- c("horizon","top.depth","bottom.depth")
colnames(megapit)[c(91,121)] <- c("total.P", "total.N")
# let's create a subset with only the data that we want to work with
soilsSubset <- cbind(megapit[2],megapit[3],megapit[4],megapit[24],megapit[27],megapit[28],megapit[91],megapit[121])
#for some reason more than 244 rows populate - remove extra rows
options(stringsAsFactors=F, strip.white=T)
megapit <- read.csv("/Users/lwasser/Documents/GitHub/biogeochemistryIPT/prototype_data/megapit/Soil_pit_data_20141113.csv", header=T, fill=T)
# change column headers and stuff for functionality (Ed's headers are impossible)
# plus it looks like a bunch of longitudes are entered incorrectly? I haven't
# fixed them here, but a bunch are >0 and they should all be <0...
colnames(megapit)[c(3,4)] <- c("latitude","longitude")
colnames(megapit)[c(24,27,28)] <- c("horizon","top.depth","bottom.depth")
colnames(megapit)[c(91,121)] <- c("total.P", "total.N")
# let's create a subset with only the data that we want to work with
soilsSubset <- cbind(megapit[2],megapit[3],megapit[4],megapit[24],megapit[27],megapit[28],megapit[91],megapit[121])
#for some reason more than 244 rows populate - remove extra rows
soilsSubset <- soilsSubset[-c(255:504), ]
#check that the data look ok
head(soilsSubset,n=10)
soilsSubset$total.P <- soilsSubset$total.P/1000
#remove '>' from the bottom.depth column
bottom.depth <- gsub(">","",soilsSubset$bottom.depth)
depth <- rowMeans(data.frame(cbind(soilsSubset$top.depth, as.numeric(bottom.depth))))
A.all <- soilsSubset[grep("A", soilsSubset$horizon),]
A.agg <- aggregate(A.all, by=list(A.all$Site), FUN=mean)
colnames(A.agg)[1] <- "site"
warnings()
A.all <- soilsSubset[grep("A", soilsSubset$horizon),]
A.agg <- aggregate(A.all, by=list(A.all$Site), FUN=mean)
doddy <- aggregate(A.all[7,8], by=list(A.all$Site), FUN=mean)
doddy <- aggregate(A.all[7], by=list(A.all$Site), FUN=mean)
doddy
doddy <- aggregate((A.all[7,8]), by=list(A.all$Site), FUN=mean)
doddy <- aggregate((A.all[7:8]), by=list(A.all$Site), FUN=mean)
doddy
latLon_Site <- aggregate((A.all[2:3]), by=list(A.all$Site), FUN=mean)
tot_N_P$lat,tot_N_P$long  <- aggregate((A.all[2:3]), by=list(A.all$Site), FUN=mean)
tot_N_P$lat; tot_N_P$long  <- aggregate((A.all[2:3]), by=list(A.all$Site), FUN=mean)
tot_N_P$lat  <- aggregate((A.all[2]), by=list(A.all$Site), FUN=mean)
tot_N_P <- aggregate((A.all[7:8]), by=list(A.all$Site), FUN=mean)
tot_N_P$lat<- aggregate((A.all[2]), by=list(A.all$Site), FUN=mean)
#get total N and P average values
tot_N_P <- aggregate((A.all[7:8]), by=list(A.all$Site), FUN=mean)
tot_N_P$lat<- aggregate((A.all[2]), by=list(A.all$Site), FUN=mean)
tot_N_P$long<- aggregate((A.all[3]), by=list(A.all$Site), FUN=mean)
head(tot_N_P,n=10)
tot_N_P <- aggregate((A.all[7:8]), by=list(A.all$Site), FUN=mean)
latLong_sum<- aggregate((A.all[2:3]), by=list(A.all$Site), FUN=mean)
tot_N_P <- aggregate((A.all[7:8]), by=list(A.all$Site), FUN=mean)
latLong_sum<- aggregate((A.all[2:3]), by=list(A.all$Site), FUN=mean)
tot_N_P$lat <- latLong_sum$latitude
tot_N_P$long <- latLong_sum$longitude
head(tot_N_P,n=10)
colnames(tot_N_P)[1] <- "site"
head(tot_N_P,n=10)
barplot(A.agg$total.N, names.arg=A.agg$site, ylab="total N (g kg-1)")
barplot(tot_N_P$total.N, names.arg=tot_N_P$site, ylab="total N (g kg-1)")
tot_N_P$NPratio <- tot_N_P$total.N/tot_N_P$total.P
#sanity check
head(tot_N_P,n=10)
barplot(tot_N_P$total.P, names.arg=tot_N_P$site, ylab="total P (g kg-1)")
barplot(A.agg$total.P, names.arg=A.agg$site, ylab="total P (g kg-1)")
barplot(tot_N_P$NPratio, names.arg=tot_N_P$site, ylab="N:P ratio")
plot(NPrat~A.agg$latitude, pch=20, xlab="Latitude", ylab="N:P ratio")
barplot(tot_N_P$NPratio, names.arg=tot_N_P$site, ylab="N:P ratio",
main="Soil N:P Ratio for NEON Sites")
counts <- table(tot_N_P$total.N, tot_N_P$total.P)
barplot(counts, main="Stacked N:P Ratio",
xlab="Site", col=c("darkblue","red"),
legend = rownames(counts))
barplot(counts, main="Stacked N:P Ratio",
xlab="Site", col=c("darkblue","red"),
names.arg=tot_N_P$site)
counts
barplot((tot_N_P$total.N, tot_N_P$total.P), main="Stacked N:P Ratio",
xlab="Site", col=c("darkblue","red"),
names.arg=tot_N_P$site)
counts <- cbind(tot_N_P$total.N, tot_N_P$total.P)
counts
barplot(counts, main="Stacked N:P Ratio",
xlab="Site", col=c("darkblue","red"),
names.arg=tot_N_P$site)
counts <- rbind(tot_N_P$total.N, tot_N_P$total.P)
counts
barplot(counts, main="Stacked N:P Ratio",
xlab="Site", col=c("darkblue","red"),
names.arg=tot_N_P$site)
barplot(tot_N_P$NPratio, names.arg=tot_N_P$site, ylab="N:P ratio",
main="Soil N:P Ratio for NEON Sites")
counts <- rbind(tot_N_P$total.N, tot_N_P$total.P)
barplot(counts, main="Stacked N:P Ratio",
xlab="Site", col=c("darkblue","red"),
names.arg=tot_N_P$site, legend = rownames(counts))
library(maptools)
library(mapproj)
library(rgeos)
library(rgdal)
library(ggplot2)
devtools::source_gist("33baa3a79c5cfef0f6df")
# nice US map GeoJSON
#Load US state boundaries
us <- readOGR("C:/Users/lwasser/Documents/GitHub/NEON_HigherEd/code/BubbleMapData/gz_2010_us_040_00_500k.json", layer="OGRGeoJSON")
us <- SpatialPolygonsDataFrame(gSimplify(us, tol=0.1, topologyPreserve=TRUE),
data=us@data)
# Remove extraneous regions from the map
us <- us[!us$NAME %in% c("Alaska", "Hawaii", "Puerto Rico", "District of Columbia"),]
#This function turns a map into a data frame that can more easily be plotted with ggplot2.
map <- fortify(us, region="NAME")
gg <- ggplot()
# the base map
gg <- gg + geom_map(data=map, map=map,
aes(x=long, y=lat, map_id=id, group=group),
fill="#ffffff", color="#0e0e0e", size=0.15)
# Add bubbles - we'll use N:P ratio
gg <- gg + geom_point(data=tot_N_P,
aes(x=long, y=lat, size=NPratio), color="#AD655F")
gg
tot_N_P
